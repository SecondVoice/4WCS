#!/bin/bash

required_packages=(openssl tcpserver)
PASSWORD="bacon"
ENCRYPTION=1


crypt(){
#Takes a message from $1 and returns the encrypted and base64 encoded message
MSG="${1}"

	if [ -z "${MSG}" ]; then 
	  echo "crypt needs a string"
	  exit -1
	fi

	CRYPT_MSG=$(echo ${MSG} | openssl enc -aes-256-cbc -pbkdf2 -a -pass pass:$(echo ${PASSWORD}))
}

dcrypt(){
#Takes an encrypted and base64 encoded message and returns the cleartext version
MSG="${1}"

	if [ -z "${MSG}" ]; then 
	  echo "crypt needs a string"
	  exit -1
	fi

	CLEARTEXT_MSG=$(echo ${MSG} | openssl enc -d -aes-256-cbc -pbkdf2 -a -pass pass:$(echo ${PASSWORD}))
}

print_history(){
#Take number of history lines to print as argument
declare -i numlines=${1}
	if [ ${numlines} -le 0 ]; then
		: # Do Nothing
	##################################################################
	# Test Number																										 #
	##################################################################

	elif [ ${numlines} -gt 0 ]; then
	   if [ ${ENCRYPTION} -eq 1 ]; then
		  printf "printing last ${numlines} lines\n"
		  declare -a MSG_LIST=($(tail -n${numlines} fil.txt))
		    for msg in ${MSG_LIST[@]}
		do
		    dcrypt ${msg}
		    printf %"s\n" $CLEARTEXT_MSG
		done
	    elif [ ${ENCRYPTION} -eq 0 ]; then
		tail -n${numlines} fil.txt
	    fi
	fi
 }
while :
 	do
	unset data

 	while [ -z ${data} ]; do
	  read -rp "message: " data
	done

    	if [ ${data} = "_" ]; then
	  read -rp "lines?: " number
	  print_history ${number}

	#####################################################################
	#	Data is a regular message
	#####################################################################
	else
	if [ ${ENCRYPTION} -eq 1 ]; then
	  crypt ${data}
	  echo "${CRYPT_MSG}" >> fil.txt

	elif [ ${ENCRYPTION} -eq 0 ]; then

	  echo "${data}" >> fil.txt
	fi
	fi


done
